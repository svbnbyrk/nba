// Code generated by mockery v2.20.0. DO NOT EDIT.

package adapters_mock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	domain "github.com/svbnbyrk/nba/internal/core/domain"
)

// TeamRepositoryInterface is an autogenerated mock type for the TeamRepositoryInterface type
type TeamRepositoryInterface struct {
	mock.Mock
}

// GetTeamStat provides a mock function with given fields: ctx, filter
func (_m *TeamRepositoryInterface) GetTeamStat(ctx context.Context, filter domain.TeamStatFilter) (domain.TeamStat, error) {
	ret := _m.Called(ctx, filter)

	var r0 domain.TeamStat
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.TeamStatFilter) (domain.TeamStat, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.TeamStatFilter) domain.TeamStat); ok {
		r0 = rf(ctx, filter)
	} else {
		r0 = ret.Get(0).(domain.TeamStat)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.TeamStatFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertTeam provides a mock function with given fields: ctx, team
func (_m *TeamRepositoryInterface) UpsertTeam(ctx context.Context, team domain.Team) error {
	ret := _m.Called(ctx, team)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Team) error); ok {
		r0 = rf(ctx, team)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpsertTeamStat provides a mock function with given fields: ctx, teamStat
func (_m *TeamRepositoryInterface) UpsertTeamStat(ctx context.Context, teamStat domain.TeamStat) error {
	ret := _m.Called(ctx, teamStat)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.TeamStat) error); ok {
		r0 = rf(ctx, teamStat)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewTeamRepositoryInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewTeamRepositoryInterface creates a new instance of TeamRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTeamRepositoryInterface(t mockConstructorTestingTNewTeamRepositoryInterface) *TeamRepositoryInterface {
	mock := &TeamRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
