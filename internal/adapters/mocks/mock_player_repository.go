// Code generated by mockery v2.20.0. DO NOT EDIT.

package adapters_mock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	domain "github.com/svbnbyrk/nba/internal/core/domain"
)

// PlayerRepositoryInterface is an autogenerated mock type for the PlayerRepositoryInterface type
type PlayerRepositoryInterface struct {
	mock.Mock
}

// GetPlayerStat provides a mock function with given fields: ctx, filter
func (_m *PlayerRepositoryInterface) GetPlayerStat(ctx context.Context, filter domain.PlayerStatFilter) (domain.PlayerStat, error) {
	ret := _m.Called(ctx, filter)

	var r0 domain.PlayerStat
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.PlayerStatFilter) (domain.PlayerStat, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.PlayerStatFilter) domain.PlayerStat); ok {
		r0 = rf(ctx, filter)
	} else {
		r0 = ret.Get(0).(domain.PlayerStat)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.PlayerStatFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertPlayerStats provides a mock function with given fields: ctx, playerStat
func (_m *PlayerRepositoryInterface) UpsertPlayerStats(ctx context.Context, playerStat domain.PlayerStat) error {
	ret := _m.Called(ctx, playerStat)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.PlayerStat) error); ok {
		r0 = rf(ctx, playerStat)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewPlayerRepositoryInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewPlayerRepositoryInterface creates a new instance of PlayerRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPlayerRepositoryInterface(t mockConstructorTestingTNewPlayerRepositoryInterface) *PlayerRepositoryInterface {
	mock := &PlayerRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
